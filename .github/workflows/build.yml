name: Build and Release

on:
  # 仅在打标签时自动触发
  push:
    tags: [ 'v*' ]
  # 手动触发
  workflow_dispatch:
    inputs:
      build_web:
        description: 'Build Web version'
        required: false
        default: true
        type: boolean
      build_tauri:
        description: 'Build Tauri desktop version'
        required: false
        default: true
        type: boolean

jobs:
  # 代码检查
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --force
      
      - name: Run TypeScript type check
        run: npm run typecheck
      
      - name: Run ESLint
        run: npm run lint

  # 构建 Web 版本
  build-web:
    name: Build Web Version
    needs: lint-and-typecheck
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_web == 'true')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --force
          # Force install platform-specific rollup binary
          npm install @rollup/rollup-linux-x64-gnu --force
      
      - name: Build Web
        run: npm run build:web
      
      - name: Upload Web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: dist/
          retention-days: 7

  # 构建 Tauri 版本（多平台）
  build-tauri:
    name: Build Tauri - ${{ matrix.platform.name }}
    needs: lint-and-typecheck
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_tauri == 'true')
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: 'Linux'
            os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
          - name: 'macOS-x64'
            os: macos-latest
            rust_target: x86_64-apple-darwin
          - name: 'macOS-arm64'
            os: macos-latest
            rust_target: aarch64-apple-darwin
          - name: 'Windows'
            os: windows-latest
            rust_target: x86_64-pc-windows-msvc
    
    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      # Linux 特定依赖
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          # For Ubuntu 24.04, we need to use webkit2gtk-4.1 instead of 4.0
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev librsvg2-dev
      
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --force
          # Force install platform-specific rollup binary for each target
          if [ "${{ matrix.platform.rust_target }}" == "x86_64-unknown-linux-gnu" ]; then
            npm install @rollup/rollup-linux-x64-gnu --force
          elif [ "${{ matrix.platform.rust_target }}" == "x86_64-apple-darwin" ]; then
            npm install @rollup/rollup-darwin-x64 --force
          elif [ "${{ matrix.platform.rust_target }}" == "aarch64-apple-darwin" ]; then
            npm install @rollup/rollup-darwin-arm64 --force
          elif [ "${{ matrix.platform.rust_target }}" == "x86_64-pc-windows-msvc" ]; then
            npm install @rollup/rollup-win32-x64-msvc --force
          fi
        shell: bash
      
      - name: Build Tauri app
        run: npm run tauri build -- --target ${{ matrix.platform.rust_target }}
      
      - name: Verify build outputs
        run: |
          echo "=== Verifying build outputs for ${{ matrix.platform.name }} ==="
          if [ "${{ matrix.platform.os }}" == "ubuntu-latest" ]; then
            # Check for Linux artifacts
            if ! find src-tauri/target -name "*.deb" -o -name "*.AppImage" | grep -q .; then
              echo "ERROR: No .deb or .AppImage files found!"
              exit 1
            fi
          elif [ "${{ matrix.platform.os }}" == "macos-latest" ]; then
            # Check for macOS artifacts
            if ! find src-tauri/target -name "*.dmg" | grep -q .; then
              echo "ERROR: No .dmg files found!"
              exit 1
            fi
          elif [ "${{ matrix.platform.os }}" == "windows-latest" ]; then
            # Check for Windows artifacts
            if ! find src-tauri/target -name "*.msi" -o -name "*.exe" | grep -q .; then
              echo "ERROR: No .msi or .exe files found!"
              exit 1
            fi
          fi
          echo "✓ Build outputs verified"
        shell: bash
        
      - name: List build outputs (Unix)
        if: matrix.platform.os != 'windows-latest'
        run: |
          echo "=== Finding all executables and bundles ==="
          find src-tauri/target -type f \( -name "*.dmg" -o -name "*.app" -o -name "*.msi" -o -name "*.exe" -o -name "*.deb" -o -name "*.AppImage" -o -name "iprompt*" \) 2>/dev/null || true
          echo "=== Checking target-specific bundle location ==="
          ls -la src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/ 2>/dev/null || true
      
      - name: List build outputs (Windows)
        if: matrix.platform.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "=== Finding all executables and bundles ==="
          Get-ChildItem -Path "src-tauri\target" -Recurse -Include @("*.msi", "*.exe", "*.nsis", "iprompt*") -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          Write-Host "=== Checking target-specific bundle location ==="
          $bundlePath = "src-tauri\target\${{ matrix.platform.rust_target }}\release\bundle"
          if (Test-Path $bundlePath) {
            Get-ChildItem $bundlePath -Recurse -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }
          } else {
            Write-Host "Bundle directory not found: $bundlePath"
          }
        
      - name: Upload artifacts (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform.name }}
          path: |
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/appimage/*.AppImage
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/rpm/*.rpm
          retention-days: 7
          if-no-files-found: error
      
      - name: Upload artifacts (macOS)
        if: matrix.platform.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform.name }}
          path: |
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/macos/*.app
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/macos/*.app.tar.gz
          retention-days: 7
          if-no-files-found: error
      
      - name: Upload artifacts (Windows)
        if: matrix.platform.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform.name }}
          path: |
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/nsis/*.exe
            src-tauri/target/${{ matrix.platform.rust_target }}/release/*.exe
          retention-days: 7
          if-no-files-found: error

  # 创建 Release（仅在打 tag 时触发）
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-web, build-tauri]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display structure of downloaded files
        run: |
          echo "=== All downloaded artifacts ==="
          ls -la artifacts/
          echo ""
          echo "=== Contents of each artifact directory ==="
          for dir in artifacts/*/; do
            echo "Directory: $dir"
            find "$dir" -type f -name "*" | head -20
            echo "---"
          done
      
      - name: Create Web archive
        run: |
          cd artifacts/web-dist
          zip -r ../../iprompt-web-${{ github.ref_name }}.zip .
          cd ../..
      
      - name: Verify artifacts exist
        run: |
          echo "=== Checking for Tauri artifacts ==="
          artifact_count=0
          
          for platform in Linux macOS-x64 macOS-arm64 Windows; do
            if [ -d "artifacts/tauri-$platform" ]; then
              echo "Found artifacts for $platform:"
              find "artifacts/tauri-$platform" -type f | head -10
              artifact_count=$((artifact_count + 1))
            else
              echo "WARNING: No artifacts found for $platform"
            fi
          done
          
          if [ $artifact_count -eq 0 ]; then
            echo "ERROR: No Tauri artifacts found!"
            exit 1
          fi
          
          echo "Found artifacts for $artifact_count platforms"
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Copy Web archive
          cp iprompt-web-${{ github.ref_name }}.zip release-assets/
          
          # Copy Linux artifacts
          if [ -d "artifacts/tauri-Linux" ]; then
            find artifacts/tauri-Linux -name "*.deb" -exec cp {} release-assets/ \;
            find artifacts/tauri-Linux -name "*.AppImage" -exec cp {} release-assets/ \;
            find artifacts/tauri-Linux -name "*.rpm" -exec cp {} release-assets/ \;
          else
            echo "WARNING: No Linux artifacts to copy"
          fi
          
          # Copy macOS x64 artifacts
          if [ -d "artifacts/tauri-macOS-x64" ]; then
            find artifacts/tauri-macOS-x64 -name "*.dmg" -exec cp {} release-assets/iprompt_${{ github.ref_name }}_x64.dmg \;
          else
            echo "WARNING: No macOS x64 artifacts to copy"
          fi
          
          # Copy macOS arm64 artifacts
          if [ -d "artifacts/tauri-macOS-arm64" ]; then
            find artifacts/tauri-macOS-arm64 -name "*.dmg" -exec cp {} release-assets/iprompt_${{ github.ref_name }}_aarch64.dmg \;
          else
            echo "WARNING: No macOS arm64 artifacts to copy"
          fi
          
          # Copy Windows artifacts
          if [ -d "artifacts/tauri-Windows" ]; then
            find artifacts/tauri-Windows -name "*.msi" -exec cp {} release-assets/ \;
            find artifacts/tauri-Windows -name "*.exe" -exec cp {} release-assets/ \;
          else
            echo "WARNING: No Windows artifacts to copy"
          fi
          
          # List all release assets
          echo "=== Release assets ==="
          ls -la release-assets/
          
          # Verify we have more than just the web archive
          file_count=$(ls -1 release-assets/ | wc -l)
          if [ $file_count -le 1 ]; then
            echo "ERROR: Only found $file_count file(s) in release-assets (expecting more than just web archive)"
            exit 1
          fi
      
      - name: Upload all assets to release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}