name: Release

on:
  # 版本文件变化时自动触发
  push:
    branches: [ main ]
    paths:
      - 'version.json'
  # 手动触发构建
  workflow_dispatch:
    inputs:
      skip_version_check:
        description: 'Skip version check and force build'
        required: false
        default: false
        type: boolean
      build_web:
        description: 'Build Web version'
        required: false
        default: true
        type: boolean
      build_tauri:
        description: 'Build Tauri desktop version'
        required: false
        default: true
        type: boolean

jobs:
  # 检查版本并创建 tag
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get current version
        id: version
        run: |
          VERSION=$(jq -r .version version.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      
      - name: Check if should release
        id: check
        run: |
          # 手动触发且跳过版本检查
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.skip_version_check }}" == "true" ]]; then
            echo "Manual trigger with skip_version_check"
            echo "should_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 检查是否已存在该版本的 tag
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag v${{ steps.version.outputs.version }} already exists"
            echo "should_release=false" >> $GITHUB_OUTPUT
          else
            echo "Tag v${{ steps.version.outputs.version }} does not exist, will create release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Update version in files
        if: steps.check.outputs.should_release == 'true' && github.event_name == 'push'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # 更新 package.json
          jq --arg v "$VERSION" '.version = $v' package.json > package.json.tmp && mv package.json.tmp package.json
          
          # 更新 tauri.conf.json
          jq --arg v "$VERSION" '.package.version = $v' src-tauri/tauri.conf.json > tauri.conf.tmp && mv tauri.conf.tmp src-tauri/tauri.conf.json
          
          # 更新 Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$VERSION\"/" src-tauri/Cargo.toml
          
          echo "Updated all version references to $VERSION"
      
      - name: Commit version updates
        if: steps.check.outputs.should_release == 'true' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add package.json src-tauri/tauri.conf.json src-tauri/Cargo.toml
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push
      
      - name: Create and push tag
        if: steps.check.outputs.should_release == 'true' && github.event_name == 'push'
        run: |
          VERSION="v${{ steps.version.outputs.version }}"
          
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          
          echo "Created and pushed tag $VERSION"

  # 代码检查
  lint-and-typecheck:
    name: Lint & Type Check
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --force
      
      - name: Run TypeScript type check
        run: npm run typecheck
      
      - name: Run ESLint
        run: npm run lint

  # 构建 Web 版本
  build-web:
    name: Build Web Version
    needs: [prepare-release, lint-and-typecheck]
    if: needs.prepare-release.outputs.should_release == 'true' && (github.event_name == 'push' || github.event.inputs.build_web == 'true')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --force
          npm install @rollup/rollup-linux-x64-gnu --force
      
      - name: Build Web
        run: npm run build:web
      
      - name: Upload Web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: dist/
          retention-days: 7

  # 构建 Tauri 版本
  build-tauri:
    name: Build Tauri - ${{ matrix.platform.name }}
    needs: [prepare-release, lint-and-typecheck]
    if: needs.prepare-release.outputs.should_release == 'true' && (github.event_name == 'push' || github.event.inputs.build_tauri == 'true')
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: 'Linux'
            os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
          - name: 'macOS-x64'
            os: macos-latest
            rust_target: x86_64-apple-darwin
          - name: 'macOS-arm64'
            os: macos-latest
            rust_target: aarch64-apple-darwin
          - name: 'Windows'
            os: windows-latest
            rust_target: x86_64-pc-windows-msvc
    
    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      # Linux 特定依赖
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev librsvg2-dev
      
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --force
          # 安装平台特定的 rollup
          if [ "${{ matrix.platform.rust_target }}" == "x86_64-unknown-linux-gnu" ]; then
            npm install @rollup/rollup-linux-x64-gnu --force
          elif [ "${{ matrix.platform.rust_target }}" == "x86_64-apple-darwin" ]; then
            npm install @rollup/rollup-darwin-x64 --force
          elif [ "${{ matrix.platform.rust_target }}" == "aarch64-apple-darwin" ]; then
            npm install @rollup/rollup-darwin-arm64 --force
          elif [ "${{ matrix.platform.rust_target }}" == "x86_64-pc-windows-msvc" ]; then
            npm install @rollup/rollup-win32-x64-msvc --force
          fi
        shell: bash
      
      - name: Build Tauri app
        run: npm run tauri build -- --target ${{ matrix.platform.rust_target }}
      
      - name: Upload artifacts (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform.name }}
          path: |
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/deb/*.deb
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/appimage/*.AppImage
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/rpm/*.rpm
          retention-days: 7
          if-no-files-found: error
      
      - name: Upload artifacts (macOS)
        if: matrix.platform.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform.name }}
          path: |
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/macos/*.app
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/macos/*.app.tar.gz
          retention-days: 7
          if-no-files-found: error
      
      - name: Upload artifacts (Windows)
        if: matrix.platform.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.platform.name }}
          path: |
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/msi/*.msi
            src-tauri/target/${{ matrix.platform.rust_target }}/release/bundle/nsis/*.exe
            src-tauri/target/${{ matrix.platform.rust_target }}/release/*.exe
          retention-days: 7
          if-no-files-found: error

  # 创建 GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-web, build-tauri]
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Web archive
        run: |
          cd artifacts/web-dist
          zip -r ../../iprompt-web-v${{ needs.prepare-release.outputs.version }}.zip .
          cd ../..
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Web 版本
          cp iprompt-web-v${{ needs.prepare-release.outputs.version }}.zip release-assets/
          
          # Linux
          if [ -d "artifacts/tauri-Linux" ]; then
            find artifacts/tauri-Linux -name "*.deb" -exec cp {} release-assets/ \;
            find artifacts/tauri-Linux -name "*.AppImage" -exec cp {} release-assets/ \;
            find artifacts/tauri-Linux -name "*.rpm" -exec cp {} release-assets/ \;
          fi
          
          # macOS
          if [ -d "artifacts/tauri-macOS-x64" ]; then
            find artifacts/tauri-macOS-x64 -name "*.dmg" -exec cp {} release-assets/iprompt_v${{ needs.prepare-release.outputs.version }}_x64.dmg \;
          fi
          if [ -d "artifacts/tauri-macOS-arm64" ]; then
            find artifacts/tauri-macOS-arm64 -name "*.dmg" -exec cp {} release-assets/iprompt_v${{ needs.prepare-release.outputs.version }}_aarch64.dmg \;
          fi
          
          # Windows
          if [ -d "artifacts/tauri-Windows" ]; then
            find artifacts/tauri-Windows -name "*.msi" -exec cp {} release-assets/ \;
            find artifacts/tauri-Windows -name "*.exe" -exec cp {} release-assets/ \;
          fi
          
          echo "=== Release assets ==="
          ls -la release-assets/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: Release v${{ needs.prepare-release.outputs.version }}
          files: release-assets/*
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}